package question547

import ("testing"
    )

type Test struct {
    M [][]int
    expected int
}

var tests []Test = []Test{
    
     Test{M:[][]int{{1,0,0},{0,1,0},{0,0,1}}, expected:3},
     Test{M:[][]int{{1,1,0},{1,1,0},{0,0,1}}, expected:2},
     Test{M:[][]int{{1,0,0},{0,1,1},{0,1,1}}, expected:2},
     Test{M:[][]int{{1,0,1},{0,1,0},{1,0,1}}, expected:2},
     Test{M:[][]int{{1,1,0},{1,1,1},{0,1,1}}, expected:1},
     Test{M:[][]int{{1,1,0,0},{1,1,0,0},{0,0,1,0},{0,0,0,1}}, expected:3},
     Test{M:[][]int{{1,1,0,0},{1,1,1,0},{0,1,1,1},{0,0,1,1}}, expected:1},
     Test{M:[][]int{{1,0,1,0},{0,1,1,0},{1,1,1,0},{0,0,0,1}}, expected:2},
     Test{M:[][]int{{1,0,1,0},{0,1,0,1},{1,0,1,1},{0,1,1,1}}, expected:1},
     Test{M:[][]int{{1,0,0,1},{0,1,1,0},{0,1,1,1},{1,0,1,1}}, expected:1},
     
     Test{M:[][]int{{1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                    {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
                    {0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                    {0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0},
                    {1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
                    {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0},
                    {0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1},
                    {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0},
                    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0}, 
                    {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0}, 
                    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}}, expected:3},
     }

func TestSolution(t *testing.T) {
    for i, test := range tests {
        actual := findCircleNum(test.M)
        if actual!=test.expected {
            t.Errorf("[Test %d] is %d, but was %d", i, test.expected, actual)
        }
    }
}
